1. 不同类型的数据应该有良好的区分。就像在定义表变量时，该表包含属性和数据，那么它的属性和数据应该能很好的区分开：
	animal = {
		name = "cat",  -- 属性
		cnt = 100,
		{"white cats",22},  -- data
		{"black cats",33},
		{"gray cats",44}
	}
2. 编码规范
	1. require 文件若只是部分函数用到，只在使用位置 require (lua 脚本)
	2. 函数命名，变量命名，文件命名要有描述性；少用缩写。除非放到项目外也非常明了，否则不要使用缩写
	3. 提倡在尽可能小的作用域中声明发量，离第一次使用越近越好，，应使用初始化代替声明+赋值的方式。 
	4. 文件名要全部小写, 可以包含下划线 (_) 或连字符 (-). 按项目约定来。
		例子：定义类 FooBar 的文件，使用 foo_bar.h,foo_bar.cc 命名文件
	5. 类型命名每个单词以大写字母开头，不包含下划线，包含类型标记 如 w 在 pyqt 中代表是 widget 类继承下来的，最基础的类使用 b开头：bRoomFrame bWidget wButtonPush(脚本中的大型表可使用该规则。),
	6. 变量名一律小写，单词间以下划线相连，类的成员变量以下划线结尾，如my_exciting_local_variable、my_exciting_member_variable_。  (脚本中表的成员变量以下划线结尾？)
	7. 对全局变量没有特别要求，少用就好，可以以g_或其他易与局部变量区分的标志为前缀。 例如 g_my_name
	8. 局部常量命名 用全大写，可以加下划线 在名称前加k：kDAY_IN_A_WEEK,kDAYINAWEEK；
	9. 全局常量 用全大写，可以加下划线 COLORRED THE_COLOR_RED；
	10. 接口类型普通函数使用驼峰式大小写,AddTableEntry() (google c++ 命名规范中，存取类函数使用和普通变量一样的命名，觉得不妥。那么使用od_ (operate data)开头如何，例如： od_SetNumber() 也可以不做区分)
	11. 非接口类型(局部类型)函数 使用普通变量名命名方式(其实区分出来比较好，可是在lua 等脚本中，函数是第一类值，所以大多都是和普通变量不加区分的。约定俗成吧，如果能该的话，使用 F_ 前缀是否会好点 例： F_change_value )
3. 服务端最主要的就是数据，首先得理解自己拥有的数据是什么，处理方法和最终需要如何展示。如 facebook 平台其实就是一个数据服务平台，如何组织数据，组织数据的关系，快速精准处理数据并有多个展示方法，是他们主要的架构核心；而最核心的就是数据网络。