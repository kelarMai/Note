使用字符类匹配特定字符集合内任何字符的模式项：
	.(点): 与任何字符配对
	%a: 与任何字母配对
	%c: 与任何控制符配对(例如\n)
	%d: 与任何数字配对
	%l: 与任何小写字母配对
	%p: 与任何标点(punctuation)配对
	%s: 与空白字符配对
	%u: 与任何大写字母配对
	%w: 与任何字母/数字配对
	%x: 与任何十六进制数配对
	%z: 与任何代表0的字符配对
	%x(此处x是非字母非数字字符): 与字符x配对. 主要用来处理表达式中有功能的字符(^$()%.[]*+-?)的配对问题, 例如%%与%配对
	[数个字符类]: 与任何[]中包含的字符类配对. 例如[%w_]与任何字母/数字, 或下划线符号(_)配对，[ABCabc]表示与字母ABCabc中的某个匹配
	[^数个字符类]: 与任何不包含在[]中的字符类配对. 例如[^%s]与任何非空白字符配对
	[]第一个字符和最后一个字符之间用连字符连接表示这两个字符之间范围内的字符集合，例：[1-9]

	当上述的字符类用大写书写时, 表示与非此字符类的任何字符配对

	特殊字符：( ) . % + - * ? [ ^ $
	+      匹配前一字符1次或多次
	*      匹配前一字符0次或多次
	-      匹配前一字符0次或多次
	?      匹配前一字符0次或1次


lua 的变量机制:和 python 一样:
		用python一切都是对象的说法来看的话，结构化数据和普通数据其实一样，都是一个唯一的对象，所以当n个变量相等时，就是说它们都指向了同一个对象。结构化数据是可以更改内容的，所以一个变量对对象进行更改后，该对象本身不变，所有指向该对象的变量仍旧指向该对象，所以显示的数据是被改变了的。而当一个变量指向普通数据时，也是指向该数据对象，可是普通数据只有一个唯一值，是不可更改的，所以当一个变量修改值时，该变量就重新指向了一个新生成的数据对象了，而其他指向原对象的变量仍旧指向原来的对象，所以显示的数据是原来的值。
		所有的对象在内存中都只保有一份，只是结构化数据代表的对象是可更改内容的而非结构化数据代表的对象是不可更改内容的。


2.在string.gsub()替换中，若匹配模式中的模式使用()包含，可以使用%1,%2等进行匹配。
	例：c_mode = "(%l+)(%d+)%s* = %s*(%l+)(%d+)%s*(%l+)(%d+)%s* = %s*(%l+)(%d+)"
		c_tag = "%5%2 = %3%8,%1%6 = %7%4"
		c_str = "first1 = one10 second2 = two20"
		c_ss = (string.gsub(c_str,c_mode,c_tag))

3.lua调用c函数，要符合lua_CFunction 定义：typedef int(*lua_CFunction)(lua_State*L)
4.Lua 解释器是一个使用Lua标准库实现的独立的应用。就是说，该解释器可以读取文件、输入字符串；然后通过调用输入函数或者库中的函数进行数据处理.
5.就是说,在建立游戏服务端的时候,也是使用C语言读取脚本文件,然后把整个文件通过API接口传输到lua库中,让库对脚本进行整理;而C再在需要时,通过接口传递参数和调用函数.或者把 C 函数封装为库，然后 lua 调用
6.几乎所有的API调用都在用一个虚拟的栈，Lua以LIFO规则操作栈，C则可以查询插入删除任意位置的栈元素，栈的大小需要确保够用
7.Lua库没有定义任何全局变量，它所有的状态保存在动态结构lua_State中
8.C调用lua函数的方法：将函数入栈，参数入栈，调用函数，然后获取返回结果.
9.调用lua的库时,需要 -l lua -lm -ldl  链接lua ,match,dl动态库
10.use luaL_loadfile to load the chunk from the file 
11.get the global value getglobint()
12.lua_newstate   lua_settable   lua_gettable can be replace by lua_getfield
13.the way to call a lua function : first push a function to be called ;second ,push the arguments to the call; third ,use lua_pcall to do the actual call ;and end ,get the result from the stack
14.	lua_pushcfunction(L, l_sin);
	lua_setglobal(L, "mysin");
15.	table.sort can call an order function
	string.gsub can call a replacement function;
	pcall and xpcall call functions in protected mode.
16.Each coroutine in Lua has its own stack
17.回调C函数会创建新的stack ，假如lua_pcall 调用某个C函数，在lua5.1版本是不能被yeild的，因为C函数会不能被重新执行。在5.3版本，则lua_pcall会调用一个新的类似finishpcall的函数真正执行lua_pcall的功能（应该是在lua中创建新的协程（有新的state），然后使用该协程再执行C函数；如果在C中被yeild,可以保存state；如果在之后重新调用该协程，会被直接long jump 到 finishpcall函数中。
18.a C module can only have one publice funciton which is the open library function ;all other can be private,declared as static in C.
19.When we want to use c to expand lua ,it's good to make c function as a module .   First ,write the C function; Then ,declare function in the module.  use the struct luaL_Reg ;And last ,use luaL_newlib to declare this module. After finish the library ,we can link it to the interperter ;We can make it to be a .so file and link in dynamic .And load it in lua just like :local mylib = require "mylib"； lua will always look for the name mimic like  luaopen_*  
20.如果想把C扩展直接和lua文件一起编译，需要:
you need some way of telling the stand-alone interpreter that it should open
this library when it opens a new state. A simple way to do this is to add luaopen_mylib into the list of
standard libraries to be opened by luaL_openlibs, in the file linit.c.
21.luaL_Buffer 建表，然后使用luaL_buffinitsize 初始化，再使用luaL_pushresultsize把变量convert进去。
22.可以使用void luaL_buffinit (lua_State *L, luaL_Buffer *B); 等把不同类型变量添加到buffer中.
23.存储非局部变量方法:the registry and upvalues.
24.在lua中生成全局变量的方法:
首先命名一个变量名称:int ref = luaL_ref(L, LUA_REGISTRYINDEX);
25.建立userdata: void *lua_newuserdata (lua_State *L, size_t size);
返回建立的block 的address
26.如果使用lua_newthread()建立新的state ,在旧的state中会有一个reference.这个reference 不能删除,不然新的state会被回收.
27.The function lua_xmove moves Lua values between two stacks in the same state.
28.神奇的cloures调用
	local oldSin = math.sin
	math.sin = function (x)
	return oldSin(x * (math.pi / 180))
	end
29.the required will creats and return a table.everything define inside the tabel and this work like a namespace
30.如果调用的函数只有一个参数并且参数是字符串，那么括号可以加可以不加
31.require 文件时，如果是本地文件，只需要文件名而不用加.lua  example:
	require("abc")  
	如果require的是本地lua 文件，则是把整个文件添加/连接（暂时不清楚模式）到该文件中，调用被reuqire文件的函数时，不需要前缀直接调用。require("abc")返回的是一个true or false 而不是对应文件的modle。 如果reqire的是.so里的文件，则返回的是该文件的modle模块，调用时需要加前缀。 example:
	require "math"    math.sin()
32.在package.loaded中保存已经require的文件，重复require只会从中返回原来的值。require成功后返回的值是一个loader；如果想重复require一个文件，可以在第二次require之前 package.loaded.modname = nil
33.写一个module 文件后，需要在文件的最后写return module_name  ;或者把该module 写入到package.loaded 文件中：在module文件开头写上package.loaded[...] =  module_name；
	Another approach to write a module is to define all functions as locals and build the returning table at the end,
34.debug library 中的 introspective 和 hooks 函数允许我们追踪state的情况和函数的运行过程
35. 使用 debug.getinfo(function or state) 可以得到函数或state的相关信息
	debug.getlocal  debug库里有很多的函数可以帮助查看variables的信息
debug.sethook  可以追踪  call return line conut 类型的消息
turn off hook with no arguments
36.可以使用count hook限制一个chunk的运行数量  -- 防止被hack
37.	宿主语言中嵌入Lua的工作流程
	（1）宿主语言建立Lua解释器对象
	（2）将宿主语言实现的Lua扩展，如函数等，注册到Lua解释器中，供其使用。
	（3）读入Lua源程序或预先编译好的Lua程序。
	（4）执行读入的Lua程序。

38. deepcopy 深度拷贝表  ，只拷贝表而不拷贝 matatable 等内容，使用 table.clone() 函数
