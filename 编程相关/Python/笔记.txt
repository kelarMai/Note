1.类的变量是可以在该类的所有实例之间共享的。如果要修改该变量大小，需要使用class.变量   的形式，如果使用 对象.变量  的方法，只是如第四点，在该对象中重新添加了属性。
2.__init__() 函数为类的初始化函数。
3.self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。
4.类还可以在对象实例化后添加删除属性；
5.__dict__ : 类的属性  __doc__ :类的文档字符串  __name__：类名  __module__: 类定义所在的模块   __bases__ : 类的所有父类构成元素  __del__ 析构   
6.	__foo__: 定义的是特殊方法，一般是系统定义名字 ，类似 __init__() 之类的。
	_foo: 以单下划线开头的表示的是 protected类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *
	__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。
7. traceback.format_exc()返回字符串，trceback.print_exc()则直接给打印出来
8. tk 的gui使用时，定义了widget 后需要使用pack或者grid(还有一种方法)把显示出来。
9. 在文件中使用   
	if __name__ == "__main__":
		function()
这样的操作，是说明只有在该开始运行时，才会运行function()函数；就是说如果只是加载该文件，是不会运行该函数的。
10. @ 的用法是装饰器，例子
	@decorator
	def fun():
把fun函数作为参数传递到decorator函数中执行。可以在不改变fun代码的情况下，扩展其功能。fun函数可以传入多个参数。忘了的话，可以查看 https://blog.csdn.net/xiangxianghehe/article/details/77170585 。
11. 使用 python 执行程序时，使用 python ./script/main.py 这样的格式执行程序，程序的当前目录是 ./ 而不是 main.py 文件所在的目录。所以如果需要使用相对路径加载文件时，需要以 ./ 为根路径再去编写路径地址。
12. 在使用 pyinstaller 打包文件时，使用 -F 参数可以使生成单一文件；如果打包后运行程序提示缺少组件，可以使用 --hidden-import 添加;一般图片资源无法无法被合并进来，需要做额外的处理，方法 ①：  把图片用base64编码转换成.py文件里面的变量，程序在使用图片前先把相关变量解码，并保存为本地的临时图片，然后即可正常在程序中show，程序加载后就可以删除本地的临时图片。    ②：或者使用 pyrcc 生成 qrc文件，再调用；
13. 在 python 中，一切的指向结构化数据的变量都是该数据的引用 就像 
	b = {"a":1,"b":2} 
	a = b
	a 和 b 都是该dict的引用，更改 a 或者 b 都会更改该 dict 而使 a b 的值都改变。
而指向普通数据(int char string 等)的变量则都只是拥有该数据的一份拷贝。 就像
	a = 1
	b = a
	a += 1
	最后，a = 2,a = 1;是不相同的。
	用python一切都是对象的说法来看的话，结构化数据和普通数据其实一样，都是一个唯一的对象，所以当n个变量相等时，就是说它们都指向了同一个对象。结构化数据是可以更改内容的，所以一个变量对对象进行更改后，该对象本身不变，所有指向该对象的变量仍旧指向该对象，所以显示的数据是被改变了的。而当一个变量指向普通数据时，也是指向该数据对象，可是普通数据只有一个唯一值，是不可更改的，所以当一个变量修改值时，该变量就重新指向了一个新生成的数据对象了，而其他指向原对象的变量仍旧指向原来的对象，所以显示的数据是原来的值。
	所有的对象在内存中都只保有一份，只是结构化数据代表的对象是可更改内容的而非结构化数据代表的对象是不可更改内容的。
14. >>from copy import copy
	>>a = [[1,2],[3,4],[4,5]]
	>>b = copy(a)
	>>b[0][0] = 6
	>>b
	>>[[6,2],[3,4],[4,5]]
	>>a
	>>[[6,2],[3,4],[4,5]]
	>>b[0] = [1,2]
	>>b
	>>[[1,2],[3,4],[4,5]]
	>>a
	>>[[6,2],[3,4],[4,5]]
copy 函数生成的新变量和原变量的地址是不一样的，可是 copy 只是一个 shallow copy (浅拷贝)，其内部的数据只是做了个 mem copy(地址拷贝？)
deepcopy 函数才能深层拷贝。







数据分析
1. 使用 numpy 通常是构造一个 N 维的数组对象(ndarray),同构数据的多维容器，有 shape dtype 属性。
2. np.array()  np.zeros() np.ones()
3. 和普通使用 python 数组不同的是，使用 numpy 的数组切片是不复制数据的，就是说切片只是原数组的引用，除非进行显式的复制操作 array[1:5].copy() 
4. 所以方式 array[0][2] array[0,2] 是等价的。(重载了 __getitem__ 方法)
5. panda 的主要数据结构 series dataframe 
6. 在 panda 中，NaN 标识缺失或者 NA 值； 在 series 中建立的表结构在进行算术运算时，会自动对其不同索引的值。




多进程：
1. 全局变量会复制到子进程中。
2. 子进程的函数参数大于等于两个，不够两个也需要添加一个 逗号 
3. 特别是 pool 使用 apply_async 函数时，一定要至少两个参数或者有个逗号，否则无法运行也不知道哪里出错。 pool.close() 和 pool.join() 都是有必要的。所有 async 类型都返回一个 AsyncResult ，可以使用 get() 获取返回值。
3. Manager() 创建一个对象控制服务进程，通过该进程来传输数据。传输的数据类型可以任意层次和多样化。
4. 