1.sql查询可以使用low()和like配合，进行模糊查询。
2.python 的log输出时如果使用%不能通过，可以使用","；
3.网络包的发送要考虑错误无序的状态；不能只看某一端的发送流程，所以信息发送有些需要采用一问一答形式
4.python读写文件时，写入信息后，需要seek把位置调整后再读取。
5.在使用协程时，如果在一个函数中使用了两次的yeild()操作，很容易导致data conflit问题；
6.在游戏中，一般可以在内存中和数据库中保存两份数据，一般用户修改的都是内存上数据，然后内存数据间隔时间再重新写入到数据库中。这样会导致两个问题，一个是写入频率，一个是如果该数据量太大而写入修改量太少。
还有一种方法是，先修改内存数据，然后最后处理完成后再单条写入到数据库中。最后在服务器维护的时候再把内存数据写入。
如何选择什么类型的数据需要在内存和数据库中各保留一份，还是只是在数据库中保存一份而使用时进行增删改查，取决于该数据的修改和使用频率。注意协程或多线程的数据共享问题。
7.网关服务器可以使玩家保持在线，在切换场景或者逻辑服务器时，不需要断开与网关服务器的连接，玩家数据在不同游戏服务器间的切换是内网切换，切换工作瞬间完成。
8. 在 C/C++ 中，char* 的值可以转化为 const char* 的值，可是调转就不行。
9. restrict ，C语言中的一种类型限定符（Type Qualifiers），用于告诉编译器，对象已经被指针所引用，不能通过除该指针外所有其他直接或间接的方式修改该对象的内容。

