1. 数据交换方法 
	底层： TCP or UDP
	上层：普通 socket or websocket
	数据协议(例如 skynet 使用的前两字节为数据长度的方法)
	数据转换方法(例如 protobuf or json)
2. 系统架构方法
	分布式 or 集群
	架构是怎么实现扩展性的
	底层逻辑，业务逻辑怎么拆分或并行
3. 网络管理
	网关设计
	负载均衡
	连接管理
4. 消息派送
	消息分发方法
5. 用户管理
	每个用户的消息转发处理
6. 服务器内部数据处理
	1. 数据缓存
		1. 数据更新方法:客户端写入数据到数据库，成功之后，让该数据的缓存失效（下次请求时从缓存中是拿不到的，然后查询数据库，再放入缓存，以保证数据同步）（应用在数据实时性不高，准确性高的场景中）
	2. 数据持久化
	3. 全局数据和局部数据
	4. 共享存储
7. GM服务器的设计
8. 日志系统
	库形式调用 or 独立服务
9. 底层和脚本
	相互调用
	数据交换


微服务架构：		(spring cloud ;dubbo;servicemesh; )(docker)
	服务的注册于发现
	弹性伸缩与负载均衡
	容错处理（断路器与限流）
		限流，将某个服务设置其最大的请求量或者连接数，硬性保护下游服务；断路器，当下游服务错误率到达一个阀值，将上游请求快速失败返回，保护上游服务稳定，同时又不给下游服务增加压力，做到快速失败、快速返回。
	流量监控与报警
	数据存储与共享
	日志分析
	插件式功能