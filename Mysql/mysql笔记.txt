https://blog.csdn.net/aisemi/article/details/55271641?locationNum=10&fps=1
1.使用sudo apt-get install mysql-server安装数据库，在安装的过程中未设置密码。
2.在普通用户下使用命令mysql -uroot -p连接数据库，由于没有设置密码，所以在需要输入密码的时候，直接按了Enter键，从而导致了错误：ERROR 1698 (28000): Access denied for user 'root'@'localhost'
解决办法：在连接mysql数据库的时候，使用命令sudo mysql -uroot -p连接数据库，由于没有设置密码，所以在需要输入密码的时候，直接按Enter键。
3. 创建用户
	CREATE USER 'username'@'host' IDENTIFIED BY 'password';
	例子：
	CREATE USER 'dog'@'localhost' IDENTIFIED BY '123456';
	CREATE USER 'pig'@'192.168.1.101_' IDENDIFIED BY '123456';
	CREATE USER 'pig'@'%' IDENTIFIED BY '123456';
	CREATE USER 'pig'@'%' IDENTIFIED BY '';
	CREATE USER 'pig'@'%';
4. 授权：
	GRANT privileges ON databasename.tablename TO 'username'@'host'
	privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL
	databasename：数据库名
	tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*
	例子：
	GRANT SELECT, INSERT ON test.user TO 'pig'@'%';
	GRANT ALL ON *.* TO 'pig'@'%';
	GRANT ALL ON maindataplus.* TO 'pig'@'%';
	用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:
	GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;
5. 设置与更改用户密码
	SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');
	如果是当前用户：
	SET PASSWORD = PASSWORD("newpassword");
6. 撤销用户权限
	REVOKE privilege ON databasename.tablename FROM 'username'@'host';
	例子：
	REVOKE SELECT ON *.* FROM 'pig'@'%';
	查看具体授权信息
	SHOW GRANTS FOR 'pig'@'%'
7. 删除用户
	DROP USER 'username'@'host';

8. 卸载重装
	删除mysql的数据文件
	sudo rm /var/lib/mysql/ -R

	删除mysql的配置文件
	sudo rm /etc/mysql/ -R

	自动卸载mysql（包括server和client）
	sudo apt-get autoremove mysql* --purge 
	sudo apt-get remove apparmor

	检查是否卸载干净
	dpkg -l | grep mysql # 若没有返回，说明已完成卸载

	接下来安装就是件简单的事情啦
	sudo apt-get install mysql-server mysql-client
9. 可以把数据库进行分区划分，命令： 
	partition by hash (column_name) 
	pratitions partition_number
	使用方法
	CREATE TABLE t1 (
    col1 INT NOT NULL,
    col2 DATE NOT NULL,
    col3 INT NOT NULL,
    col4 INT NOT NULL,
    UNIQUE KEY (col1, col2, col3)
	)
	PARTITION BY HASH(col3)
	PARTITIONS 4;

	CREATE TABLE t2 (
	    col1 INT NOT NULL,
	    col2 DATE NOT NULL,
	    col3 INT NOT NULL,
	    col4 INT NOT NULL,
	    UNIQUE KEY (col1, col3)
	)
	PARTITION BY HASH(col1 + col3)
	PARTITIONS 4;
10. Key本身只具有约束（constraint）属性，建立唯一键和主键会附带创建索引，所以也具有索引（index）属性。
	唯一键：
		unique、unique key、unique index、constraint约束名 unique（字段），创建唯一约束，附带会创建唯一索引
	主键：
		primarykey、constraint约束名 primary key（字段），属于唯一键，是一个比较特殊的唯一键，区别在于主键不可为空
	外键：
		默认情况下，可以单独删除从表某条记录，但删除主表的时会被从表限制。
	普通索引：
		是纯粹的索引，不是通过Key创建的，所以只有优化查询没有什么实际限制作用。一个表中可以把多个字段设为index字段，index字段的值可以重复，把经常作为查询条件的字段作为index字段，一个字段设为index字段后，在表结构中的KEY标志是MUL
11. GRANT REPLICATION SLAVE ON 添加主从访问权限；可以通过修改 my.init 配置文件启动 log-bin (二进制类型)日志，给从服务器访问。从数据库启动 relay-log 日志，然后从数据库使用 change master to master_host= 命令连接主服务器；master_log_file 属性为添加主数据库的二进制日志
12. 设置查询缓存：
	缓存机制简单的说就是缓存sql文本及查询结果；如果表更改了，那么使用这个表的所有缓冲查询将不再有效，查询缓存值的相关条目被清空。显然，这对于频繁更新的表，查询缓存是不适合的，而对于一些不常改变数据且有大量相同sql查询的表，查询缓存会节约很大的性能。
	查询必须是完全相同的(逐字节相同)才能够被认为是相同的。另外，同样的查询字符串由于其它原因可能认为是不同的。使用不同的数据库、不同的协议版本或者不同 默认字符集的查询被认为是不同的查询并且分别进行缓存。
	SELECT * FROM tbl_name
　　Select * from tbl_name  这两个是不同的。
	命令：
		SHOW VARIABLES LIKE '%query_cache%';  查看缓存设置
		set global query_cache_size; 设置缓存内存
		set session query_cache_type; 开启查询缓存。
13. 如果需要远程连接 mysql ，需要把 mysql 的地址取消绑定 127.0.0.1；使用 netstat -an | grep 3306 查看 mysql 绑定了哪个地址；如果绑定为 127.0.0.1,修改 etc/mysql/my.cnf 文件，把 bind-address = 127.0.0.1 注释了。